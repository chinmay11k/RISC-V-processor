`timescale 1ns / 1ps
module ALU(
input[31:0]A,B,IMM,NPC,
input[5:0]func,
input [2:0]type,
output reg [31:0]ALUout );
//op-coad parameters
parameter 
ADD=6'b000000,//R TYPE
SUB=6'b000001,
AND=6'b000010,
OR=6'b000011,
SLT=6'b000100,//set less than
MUL=6'b000101,
HLT=6'b111111,
ADDI=6'b001010,
SUBI=6'b001011,
LW=6'b001000,
SW=6'b001001,
SLTI=6'b001100;

parameter
RR_ALU=3'b000,  RM_ALU=3'b001,
LOAD=3'b010,STORE=3'b011,
BRANCH=3'b100;

always@(*)
begin
case(type)
   RR_ALU:begin
           case(func)
               ADD:ALUout<=  A+B;
               SUB:ALUout<=  A-B;
               AND:ALUout<=  A&B;
               OR:ALUout<=  A|B;
               SLT:ALUout<=  A<B;
               MUL:ALUout<=  A*B;
               default :ALUout<= 32'hxxxxxxxx;
            endcase
            end
   RM_ALU:begin
        case(func)
        ADDI:ALUout<=  A+IMM;
        SUBI:ALUout<=  A-IMM;
        SLTI:ALUout<=  A<IMM;
        default :ALUout<= 32'hxxxxxxxx;
        endcase
        end
     
   LOAD,STORE:
      begin
      ALUout<=  A+IMM;
      end
    
   BRANCH:
   ALUout<=  NPC+IMM;
  
     endcase
end
endmodule
